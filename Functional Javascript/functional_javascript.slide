Functional Javascript
15 Mar 2016
JS Coding Nights

Ben Bieker
ben@bieker.ninja
https://bieker.ninja
@Blackgentoo

* About me

.image ./img/avatar.png _ 300

- Likes ES2015/2016 Features
- Also developing stuff with the Go Language
- Always curious and interested in how to write better code, that's why this talk happened.

* Different programming paradigms
* Imperative
- States and commands that must be run in the same order.
- "First do that, then do this" is very different from "first do this, then do that"
- C is an imperative language

* Object Oriented
- Data and operations about that data encapsulated in objects
- Information hiding
- Some languages have message passing between objects
- Some have classes
- Inheritance mess! See all Java Frameworks out there

* Functional
Obviously, we will cover that today

* Logical 
- based on axioms
- inference rules
- and queries
- Prolog is a logic programming language that explains facts and rules about a problem domain.

* Object Oriented Example
* Object Oriented Example from Professor Frisby
	var Flock = function(n) {
	  this.seagulls = n;
	};

	Flock.prototype.conjoin = function(other) {
	  this.seagulls += other.seagulls;
	  return this;
	};

	Flock.prototype.breed = function(other) {
	  this.seagulls = this.seagulls * other.seagulls;
	  return this;
	};

	var flock_a = new Flock(4);
	var flock_b = new Flock(2);
	var flock_c = new Flock(0);

	var result = flock_a.conjoin(flock_c)
		.breed(flock_b).conjoin(flock_a.breed(flock_b)).seagulls;
	//=> 32
If you guessed 16, you're wrong because state got mutated internally in flock_a

* Functional version
	var add = function(x, y) { return x + y; };
	var multiply = function(x, y) { return x * y; };

	var flock_a = 4;
	var flock_b = 2;
	var flock_c = 0;

	var result = 
		add(
	  		multiply(flock_b, add(flock_a, flock_c)), 
			multiply(flock_a, flock_b));
	//=>16

* Remember some basic mathematical laws
	// associative
	add(add(x, y), z) === add(x, add(y, z));

	// commutative
	add(x, y) === add(y, x);

	// identity
	add(x, 0) === x;

	// distributive
	multiply(x, add(y,z)) === add(multiply(x, y), multiply(x, z));

* Refactoring
	// Original line
	add(multiply(flock_b, add(flock_a, flock_c)), multiply(flock_a, flock_b));

	// Apply the identity property to remove the extra add
	// (add(flock_a, flock_c) == flock_a)
	add(multiply(flock_b, flock_a), multiply(flock_a, flock_b));

	// Apply distributive property to achieve our result
	multiply(flock_b, add(flock_a, flock_a));

* First Class Functions
* First Class Functions
*first*class* just means that functions are treated like everything else

- Can be sotred in variables/arrays
- Can be apssed around
- Returned and so on...

	var hello = function(name) {
	  return `Hello ${name}`;
	}
	hello; // Prints out function body
	hello('peter'); // Invokes function -> Hello peter

* Pure Functions
* Pure Functions

A Pure Function (aka Expression) is a function where the return value is only determined by its input values, without observable side effects.

If called with the same arguments again, it will always produce the same result.

* Pure Function Example
Pure Function
	
	function add(a, b) {
		return a + b;
	}
	// Pure, always returns the same result
	add(1,2); // => 3
	add(1,2); // => 3

Dirty Function
	
	var count = 0;
	function add(a, b) {
		return count += a + b;
	}
	// Not pure, function uses some state
	add(1,2) // => 3
	add(1,2) // => 6

* Side Effects
- changing the file system
- inserting a record into a database
- making an http call
- mutations
- printing to the screen / logging
- obtaining user input
- querying the DOM
- accessing system state

* Advantages of pure functions
* Always Cacheable
	var memoize = function(f) {
	  var cache = {};

	  return function() {
		var arg_str = JSON.stringify(arguments);
		cache[arg_str] = cache[arg_str] || f.apply(f, arguments);
		return cache[arg_str];
	  };
	};

	var squareNumber = memoize(function(x) {
		return x * x;
	});

	squareNumber(4); // => 16
	squareNUmber(4); // => 16 out of the cache for the same input

* Self-Documenting
Everything that a function needs is passed right into it. There are no hidden dependencies.

Impure, we don't know that the function is up to only by looking at it's attributes

	var signUp = function(attrs) {
	  var user = saveUser(attrs);
	  welcomeUser(user);
	};

Pure, we can look at attributes and now what's going on

	var signUp = function(Db, Email, attrs) {
	  return function() {
		var user = saveUser(Db, attrs);
		welcomeUser(Email, user);
	  };
	};

* Joe Armstrong
_The_problem_with_object-oriented_languages_is_theyâ€™ve_got_all_this_implicit_environment_that_they_carry_around_with_them._You_wanted_a_banana_but_what_you_got_was_a_gorilla_holding_the_banana..._and_the_entire_jungle_

* Testable
Pure function can be tested easily, obviously. No need to *mock* some other stateful services that are used by impure functions.

* Parallel Code
No race conditions can occur when pure functions are run in parallel, because they access no shared memory.

* One big problem
Yay, pure function are nice, but can you actually know if something is a pure function?

Turns out, not except if you are carefully reading the whole function and check if it mutates state or input variables.

* Primitive example

	var x = 5;
	function change(x) {
		x = 7;
	}
	change(x);

	// What is x now and why?
	x == ?

* Object parameters

	var x = { foo: 'bar' };
	function change(x) {
		x.foo = 'baz';
	}
	change(x);

	// Now x was changed

- Objects are always passed by reference
- Primitives are passed by value (like in any other language)

* Object.freeze
[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze]]

* Immutable JS
.iframe https://facebook.github.io/immutable-js/docs/#/ 550 1000

* Recursion
* Recursion
Just don't do it!

_Recursion_is_the_goto_of_functional_programming_
Erik Meijer

* Considerations when using Recursion
Callstack Size limitations [[http://www.2ality.com/2014/04/call-stack-size.html]]
- Node.js about 11034
- Firefox about 50994
- Chrome 10402

Tail call optimization coming in ES2017.

* Working with Lists/Arrays
So recursion is bad, but we can solve most of our problems by using Lists (Arrays) and Loop/Filter Methods.

[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array]]

* Higher Order Functions
* Higher Order Functions
In mathematics and computer science, a higher-order function (also functional, functional form or functor; not to be confused with the functor concept in category theory) is a function that does at least one of the following:

- takes one or more functions as arguments,
- returns a function as its result.

* Closure
A Closure for example is also a Higher Order Function.

	function add(x) {
		var y = x * 2;
		return function(a) {
			return y + a;
		}
	}

	var some = add(2);
	some(2); // => 6

* Currying
Call a function with fewer arguments than it expects. It returns a function that takes the remaining arguments.

	var add = function(x) {
	  return function(y) {
		return x + y;
	  };
	};

	var increment = add(1);
	var addTen = add(10);

	increment(2);
	// 3

	addTen(2);
	// 12

* More useful curry example
	
	var curry = require('lodash/curry');

	var match = curry(function(what, str) {
	  return str.match(what);
	});

	match(/\s+/g, 'hello world');
	// [ ' ' ]

	match(/\s+/g)('hello world');
	// [ ' ' ]

	var hasSpaces = match(/\s+/g);
	
	hasSpaces('hello world');
	// [ ' ' ]
	hasSpaces('spaceless');
	// null

* Functional Composition
Combine functions to create new ones!

	var compose = function(f, g) {
	  return function(x) {
		return f(g(x));
	  };
	};
* Function composition example
	var toUpperCase = function(x) {
	  return x.toUpperCase();
	};
	var exclaim = function(x) {
	  return x + '!';
	};
	var shout = compose(exclaim, toUpperCase);

	shout("send in the clowns");
	//=> "SEND IN THE CLOWNS!"
* Practical Part
* Practical Part
- Workshop

   npm install -g functional-javascript-workshop@latest

- Play around with ImmutableJS or Lodash
- Refactor one of your own projects
- Do other exercises, or exercises of this excellent Book [[https://drboolean.gitbooks.io/mostly-adequate-guide/content/index.html]]



* References
[[https://drboolean.gitbooks.io/mostly-adequate-guide]]
[[http://eloquentjavascript.net/1st_edition/chapter6.html]]
